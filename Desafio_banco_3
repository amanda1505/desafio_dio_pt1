from abc import ABC, abstractmethod

class Cliente:
    def __init__(self, cpf, nome, data_nascimento, endereco):
        self.cpf = cpf
        self.nome = nome
        self.data_nascimento = data_nascimento
        self.endereco = endereco
        self.contas = []

    def adicionar_conta(self, conta):
        self.contas.append(conta)

class Conta:
    def __init__(self, numero, cliente):
        self._saldo = 0
        self._numero = numero
        self._agencia = "0001"
        self._cliente = cliente
        self._historico = Historico()

    @property
    def saldo(self):
        return self._saldo
    
    @property
    def numero(self):
        return self._numero
    
    @property
    def agencia(self):
        return self._agencia
    
    @property
    def cliente(self):
        return self._cliente
    
    @property
    def historico(self):
        return self._historico
    
    def sacar(self, valor):
        if valor > self.saldo:
            print("Operação falhou! Seu saldo é insuficiente.")
        elif valor > 0: 
            self._saldo -= valor 
            self._historico.adicionar_transacao(Saque(valor))
            print(f"Saque de R$ {valor:.2f} realizado com sucesso")
            return True
        else: 
            print("Operação falhou! O valor informado é inválido.")
        return False
    
    def depositar(self, valor):
        if valor > 0: 
            self._saldo += valor
            self._historico.adicionar_transacao(Deposito(valor))
            print("Depósito realizado com sucesso!")
        else:
            print("Operação falhou! O valor informado é inválido.")
            return False
        return True

class ContaCorrente(Conta):
    def __init__(self, numero, cliente, limite=500, limite_saques=3): 
        super().__init__(numero, cliente)
        self.limite = limite
        self.limite_saques = limite_saques

    def sacar(self, valor):
        numero_saques = len([t for t in self.historico.transacoes if t["tipo"] == Saque.__name__])

        if valor > self.limite:
            print("Operação falhou! O valor excede o limite.")
        elif numero_saques >= self.limite_saques:
            print("Operação falhou! Número máximo de saques excedido.")
        else: 
            return super().sacar(valor)
        return False
    
    def __str__(self):
        return f"""\
Agência: {self.agencia}
Conta Corrente: {self.numero}
Titular: {self.cliente.nome}
Saldo: R$ {self.saldo:.2f}
"""

class Historico:
    def __init__(self):
        self._transacoes = []

    @property
    def transacoes(self):
        return self._transacoes
    
    def adicionar_transacao(self, transacao):
        self._transacoes.append({
            "tipo": transacao.__class__.__name__,
            "valor": transacao.valor,
        })

class Transacao(ABC):
    @property
    @abstractmethod
    def valor(self):
        pass

    @abstractmethod
    def registrar(self, conta):
        pass

class Saque(Transacao):
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor
    
    def registrar(self, conta):
        if conta.sacar(self.valor):
            conta.historico.adicionar_transacao(self)

class Deposito(Transacao): 
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor
    
    def registrar(self, conta):
        if conta.depositar(self.valor):
            conta.historico.adicionar_transacao(self)

def menu(): 
    return input("""\n
[0] Depositar
[1] Sacar 
[2] Extrato
[3] Novo cliente
[4] Nova conta
[5] Exibir informações da conta
[6] Sair
Informe a operação => """)

def filtrar_cliente(cpf, clientes):
    clientes_filtrados = [cliente for cliente in clientes if cliente.cpf == cpf]
    return clientes_filtrados[0] if clientes_filtrados else None

def recuperar_conta(cliente):
    if not cliente.contas: 
        print("\n Cliente ainda não possui conta! ")
        return None
    return cliente.contas[0]  # Supondo que o cliente tenha apenas uma conta

def criar_cliente(clientes):
    cpf = input("\nInforme o CPF (somente números): ")
    cliente = filtrar_cliente(cpf, clientes)

    if cliente:
        print("\n Já existe um cliente com esse CPF. ")
        return

    nome = input("Informe o nome completo: ")
    nascimento = input("Informe a data de nascimento (dd-mm-aaaa): ")
    endereco = input("Informe o endereço (logradouro, nro - bairro - cidade/sigla do estado): ")

    cliente = Cliente(cpf=cpf, nome=nome, data_nascimento=nascimento, endereco=endereco)
    clientes.append(cliente)
    print("\n Cliente cadastrado com sucesso! ")

def criar_conta(numero_conta, clientes, contas):
    cpf = input("\n Informe o CPF do cliente: ")
    cliente = filtrar_cliente(cpf, clientes)
    
    if not cliente:
        print("\n Cliente não encontrado.")
        return 

    conta = ContaCorrente(numero=numero_conta, cliente=cliente)
    contas.append(conta)
    cliente.adicionar_conta(conta)

    print("\n Conta criada com sucesso!")

def depositar(clientes):
    cpf = input("\n Informe o CPF: ")
    cliente = filtrar_cliente(cpf, clientes)

    if not cliente: 
        print("\n Cliente não encontrado!")
        return
    valor = float(input("\n Informe o valor do depósito: "))
    transacao = Deposito(valor)
    conta = recuperar_conta(cliente)
    if not conta:
        return
    transacao.registrar(conta)

def sacar(clientes):
    cpf = input("\n Informe o CPF: ")
    cliente = filtrar_cliente(cpf, clientes)

    if not cliente: 
        print("\n Cliente não encontrado!")
        return
    valor = float(input("\n Informe o valor do saque: "))
    transacao = Saque(valor)
    conta = recuperar_conta(cliente)
    if not conta:
        return
    transacao.registrar(conta)

def exibir_extrato(clientes):
    cpf = input("\n Informe o CPF: ")
    cliente = filtrar_cliente(cpf, clientes)

    if not cliente: 
        print("\n Cliente não encontrado!")
        return
    
    conta = recuperar_conta(cliente)
    if not conta:
        return
    
    print("\n========EXTRATO=========")
    transacoes = conta.historico.transacoes

    extrato = ""
    if not transacoes:
        extrato = "Não foram realizadas movimentações."
    else:
        for transacao in transacoes:
            extrato += f"\n{transacao['tipo']}:\n\tR$ {transacao['valor']:.2f}"
    
    print(extrato)
    print(f"\nSaldo:\n\tR$ {conta.saldo:.2f}")
    print("=========================")

def exibir_info_conta(contas):
    numero = int(input("\n Informe o número da conta: "))
    conta = next((c for c in contas if c.numero == numero), None)
    if conta:
        print(conta)
    else:
        print("\n Conta não encontrada! ")

def main():
    clientes = []
    contas = []

    while True: 
        operacao = menu()

        if operacao == "0": 
            depositar(clientes)

        elif operacao == "1":
            sacar(clientes)

        elif operacao == "2":
            exibir_extrato(clientes)

        elif operacao == "3": 
            criar_cliente(clientes)

        elif operacao == "4": 
            numero_conta = len(contas) + 1
            criar_conta(numero_conta, clientes, contas)
        
        elif operacao == "5":
            exibir_info_conta(contas)

        elif operacao == "6":
            print("\n Obrigado por utilizar nosso sistema bancário. Até a próxima!")
            break
        else: 
            print("\n Código inválido, por favor selecione novamente a operação desejada.")

if __name__ == "__main__":
    main()
